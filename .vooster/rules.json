{
  "rules": [
    {
      "type": "prd",
      "content": "# 제품 요구사항 문서(PRD)\n\n## 1. 개요\n본 통합시스템은 SEO 최적화된 랜딩페이지에서 Typebot+GPT 챗봇(‘눈콩이’)으로 사용자를 상담 유도하고, 상담 데이터(리드)를 Supabase에 저장 후 Google Sheets/Airtable로 동기화, 이메일 뉴스레터 및 Slack 알림을 자동 발송하는 워크플로우를 제공합니다. 향후 EMR 연동 확장성을 고려하며, 30주년 브랜드 신뢰와 리드→예약 전환율 극대화가 목표입니다.\n\n## 2. 문제 정의\n1. 기존 홈페이지는 정보 탐색–상담–예약 흐름이 단절돼 전환율이 낮음  \n2. 전화 중심 상담으로 병원·사용자 모두 시간·비용 부담 발행  \n3. SEO/AEO 미흡으로 검색 가시성이 낮아 신규 유입이 제한됨  \n4. 예약·상담 데이터가 분산돼 CRM 및 마케팅 자동화가 어려움\n\n## 3. 목표 및 지표\n- 1차 목표: AI 상담→예약까지 원스톱 퍼널 구축  \n- 2차 목표: 브랜드 콘텐츠 강화 및 SEO 상위 10위 달성  \n- 정량 지표  \n  • 월간 신규 리드 1,000건  \n  • 예약 전환율 35%  \n  • 챗봇 만족도(5점 척도) 4.8 이상  \n  • 유입 키워드 300개 이상, 페이지 로딩 <2초\n\n## 4. 대상 사용자\n### 주요 사용자\n- 20~60대, 시력교정·백내장·노안·안구건조증 등 관심자  \n- 모바일 검색·SNS 활용 비중이 높고 즉시 상담을 선호  \n### 이해관계자\n- 병원 원장단·스태프, 마케팅팀, IT팀\n\n## 5. 사용자 스토리\n- “안과 수술 전후 주의사항을 즉시 알고 싶다.”  \n- “모바일로 간단히 예약하고 카톡 알림을 받고 싶다.”  \n- “상담 내역을 이메일로 저장하고 싶다.”  \n- “영어로도 정보를 보고 싶다(해외 환자).”  \n- “병원 위치를 문자로 받아 네비게이션을 켜고 싶다.”\n\n## 6. 기능 요구사항\n### 핵심 기능\n| 기능 | 설명 | 수용 기준 |\n|------|------|-----------|\n| Typebot+GPT 챗봇(눈콩이) | 관심질환 선택, 자연어 Q&A, \"설명이 도움이 되셨나요?\" 및 예약 CTA | 관심분야 선택, 95% 질문 이해, 응답 <3초, 예약 폼 연결 |\n| 리드 챗봇(Typebot) | 예약·상담 정보 폼, 사용자 입력 Webhook → Supabase 저장 | 이름·연락처·이메일·관심분야·문의내용 → Supabase 저장 |\n| 자동화 연동 | Supabase 신규 리드→Google Sheets/Airtable 동기화, 이메일/Slack 알림 | 신규 리드 발생 시 Google Sheets/Airtable 추가, 뉴스레터·Slack 알림 자동 발송 |\n| 이메일/Slack 알림 | 신규 리드 발생 시 자동 발송 | 메일/Slack 템플릿 정확도 100%, 개인정보 최소화 |\n| SEO/AEO | 메타태그, 시마틱 마크업 | Lighthouse SEO 95+, 구글 서치콘솔 에러 0 |\n| 다국어(i18n) | KO/EN 기본, 확장 가능 | 언어 전환 버튼, URL 구조 locale 반영 |\n| SNS CTA | 인스타·블로그·숏츠 링크 | 클릭 추적, GA 이벤트 연동 |\n| FAQ 자동 생성 | AI로 빈도 높은 질문 업데이트 | 주 1회 이상 자동 학습 및 게시 |\n| 위치·교통 안내 | 지도 임베딩, 문자/카톡 전송 | 클릭 후 5초 내 링크 수신 |\n\n### 보조 기능\n- 데이터시각화 대시보드(리드·예약·전환율)\n- A/B 테스트 모듈\n- 관리자 FAQ CRUD UI\n- 장애 알림(Slack, 이메일)\n\n## 7. 비기능 요구사항\n- 성능: FCP <1.5s, TTFB <200ms  \n- 보안: RLS, 개인정보 암호화, HTTPS 강제, HIPAA 수준  \n- 가용성: 99.9% SLA (Vercel+Supabase)  \n- 확장성: pgvector 기반 지식베이스 증분학습  \n- 호환성: 최신 Chrome, Safari, Edge, iOS/Android WebView\n\n## 8. 기술 고려사항\n- 프런트엔드: Next.js14, React18, TypeScript, Tailwind, shadcn/ui  \n- 백엔드: Supabase(PostgreSQL, Edge Functions, Realtime, Auth)  \n- AI: OpenAI GPT-4o, text-embedding-3-large, pgvector  \n- 메시징: KakaoTalk Biz API, Resend(Email), Slack, Twilio(SMS)  \n- 배포: Vercel CDN, Supabase 인프라, 독립 도메인 https://ysk-eye.ai  \n- 분석: Vercel Analytics, GA4, Supabase Analytics  \n- CI/CD: GitHub Actions→Vercel 자동배포, Supabase CLI\n\n## 9. 핵심 성과지표(KPI)\n1. 기술: Lighthouse 95+/100, API 오류율 <0.5%  \n2. 비즈니스: 월 예약 350건, CAC 20% 절감  \n3. 사용자: 챗봇 재방문율 40%, 뉴스레터 구독률 15%\n\n## 10. 일정·마일스톤\n| 주차 | 주요 산출물 |\n|------|------------|\n| W1 (MVP) | 랜딩페이지 베이스, GPTs 링크, 예약 폼, 카톡 알림, 기본 SEO |\n| W2 | Typebot 퍼널 고도화, 이메일·Slack 연동, 다국어, FAQ, 지도 |\n| W3 | 벡터 검색, 리마인더 자동화, A/B 테스트, 성능 최적화 |\n| W4 | 사용자 피드백 반영, 콘텐츠 확장, 공식 론칭 |\n\n## 11. 리스크 및 대응\n- 의료 정보 정확도 → 전문의 주 1회 검수 프로세스  \n- 카카오 API 요금 변화 → 대체 채널(SMS/Telegram) 백업  \n- 데이터 유출 → 주기적 보안점검·침해사고 대응 매뉴얼  \n- AI 오답 이슈 → 추천 강도 조절, 사람이 개입가능한 “전문가 연결” 버튼\n\n## 12. 향후 계획\n- 음성 챗봇(Voice AI) 및 전화예약 IVR 연동  \n- EMR·보험청구 시스템 통합  \n- 웨어러블 연동(시력측정 결과 자동 수집)  \n- 오프라인 키오스크 앱 확장\n\n(문서 길이: 약 5,100자)",
      "writedAt": "2025-08-13T03:44:00.088Z"
    },
    {
      "type": "architecture",
      "content": "# 🏥 연수김안과의원 기술스택 명세서 (Supabase 통합)\n\n> **\"30년의 신뢰, AI로 미래를 열다\"** - 1주일 빠른 출시 완전 기술스택\n\n---\n\n## 📋 **프로젝트 개요 및 범위 (PRD 태스크 001~022 반영)**\n\n### **프로젝트명**: YSK AI Landing Page (연수김안과)\n### **버전**: 1.0.0\n### **주요 목표**:\n- 1주일 MVP 출시, 의료 상담·예약 자동화, SEO/AEO 최적화\n- 사용자 친화적 UI, 실시간 데이터 처리, 보안 및 개인정보보호\n\n### **PRD 태스크 통합 범위**:\n- 태스크001: 랜딩페이지 기본 구조 설계\n- 태스크002: 의료 서비스 설명 영역 구성\n- 태스크003: AI 챗봇 UI 및 대화 흐름 설계\n- 태스크004: 예약 폼 및 프로세스 정의\n- 태스크005: 환자 정보 수집 설계\n- 태스크006: 진료/상담 서비스 타입 구분\n- 태스크007: 상담 기록 및 이력 관리 방식\n- 태스크008: 실시간 알림/푸시 연동\n- 태스크009: 이메일/SMS/카카오톡 통합 알림\n- 태스크010: AI 상담 추천 로직 설계\n- 태스크011: 의료 FAQ 및 지식베이스 구조화\n- 태스크012: 벡터 DB 기반 검색 적용\n- 태스크013: 개인정보처리방침/동의 플로우\n- 태스크014: 인증/로그인(비회원 포함) 처리\n- 태스크015: 예약 확인/취소/변경 플로우\n- 태스크016: 관리자 모니터링 대시보드 정의\n- 태스크017: SEO, AEO, 모바일 최적화\n- 태스크018: 성능 모니터링 및 장애 알림\n- 태스크019: 데이터 백업 및 복구 전략\n- 태스크020: HIPAA/의료 규정 준수 요구사항\n- 태스크021: 외부 API(카카오/슬랙/이메일) 연동\n- 태스크022: 장애 대응 및 운영 자동화 구조\n- 태스크023: (PRD 추가) 실명 인증 및 본인 확인 로직\n- 태스크024: (PRD 추가) 모바일 최적화\n- 태스크025: (PRD 추가) 예약 리마인더(알림) 자동화\n- 태스크026: (PRD 추가) 상담 이력 데이터 시각화 및 통계 대시보드\n- 태스크027: (PRD 추가) 관리자/의료진용 알림 및 승인 플로우\n\n---\n\n## 🛠️ **Core Technology Stack**\n\n### **⚛️ Frontend Framework**\n```typescript\n{\n  \"framework\": \"Next.js 14 (App Router)\",\n  \"language\": \"TypeScript 5.0+\",\n  \"runtime\": \"React 18+ (Server Components)\",\n  \"styling\": \"Tailwind CSS 3.4\",\n  \"deployment\": \"Vercel\"\n}\n```\n\n### **🗄️ Backend & Database (Supabase 통합)**\n```typescript\n{\n  \"backend\": \"Supabase (PostgreSQL + Edge Functions)\",\n  \"database\": \"Supabase PostgreSQL\",\n  \"auth\": \"Supabase Auth\",\n  \"storage\": \"Supabase Storage\",\n  \"realtime\": \"Supabase Realtime\",\n  \"edge_functions\": \"Supabase Edge Functions (Deno)\"\n}\n```\n\n### **🎨 UI/UX Libraries**\n```typescript\n{\n  // Component System\n  \"ui_framework\": \"shadcn/ui + Radix UI\",\n  \"components\": [\n    \"@radix-ui/react-dialog\",\n    \"@radix-ui/react-portal\", \n    \"@radix-ui/react-slot\",\n    \"@radix-ui/react-accordion\",\n    \"@radix-ui/react-avatar\",\n    \"@radix-ui/react-checkbox\",\n    \"@radix-ui/react-dropdown-menu\",\n    \"@radix-ui/react-label\",\n    \"@radix-ui/react-select\",\n    \"@radix-ui/react-separator\",\n    \"@radix-ui/react-toast\"\n  ],\n  \n  // Styling Utilities\n  \"utilities\": [\n    \"class-variance-authority\",\n    \"clsx\",\n    \"tailwind-merge\",\n    \"tailwindcss-animate\"\n  ],\n  \n  // Icons & Animation\n  \"icons\": \"Lucide React\",\n  \"animation\": \"Framer Motion 12\"\n}\n```\n\n---\n\n## 🤖 **AI & Integration Stack**\n\n### **AI Services**\n```typescript\n{\n  \"primary_llm\": \"OpenAI GPT-4o\",\n  \"chatbot_platform\": \"기존 GPTs + Typebot\",\n  \"vector_db\": \"Supabase pgvector (벡터 검색)\",\n  \"embedding\": \"OpenAI text-embedding-3-large\"\n}\n```\n\n### **외부 서비스 연동**\n```typescript\n{\n  \"messaging\": {\n\n    \"email\": \"Resend.com\",\n    \"sms\": \"Twilio\",\n    \"slack\": \"Slack API (내부 알림)\"\n  },\n  \"analytics\": {\n    \"web\": \"Vercel Analytics\",\n    \"seo\": \"Google Search Console\",\n    \"user\": \"Supabase Analytics\"\n  }\n}\n```\n\n---\n\n## 📦 **Package Dependencies**\n\n### **Production Dependencies**\n```json\n{\n  // Core Framework\n  \"next\": \"^14.0.0\",\n  \"react\": \"^18.0.0\",\n  \"react-dom\": \"^18.0.0\",\n  \"typescript\": \"^5.0.0\",\n  \n  // Supabase Integration\n  \"@supabase/supabase-js\": \"^2.39.0\",\n  \"@supabase/ssr\": \"^0.1.0\",\n  \"@supabase/auth-helpers-nextjs\": \"^0.8.0\",\n  \n  // UI Components\n  \"@radix-ui/react-dialog\": \"^1.1.14\",\n  \"@radix-ui/react-portal\": \"^1.1.9\",\n  \"@radix-ui/react-slot\": \"^1.2.3\",\n  \"@radix-ui/react-accordion\": \"^1.1.0\",\n  \"@radix-ui/react-avatar\": \"^1.0.0\",\n  \"@radix-ui/react-checkbox\": \"^1.0.0\",\n  \"@radix-ui/react-dropdown-menu\": \"^2.0.0\",\n  \"@radix-ui/react-label\": \"^2.0.0\",\n  \"@radix-ui/react-select\": \"^1.2.0\",\n  \"@radix-ui/react-separator\": \"^1.0.0\",\n  \"@radix-ui/react-toast\": \"^1.1.0\",\n  \n  // Styling\n  \"tailwindcss\": \"^3.4.0\",\n  \"class-variance-authority\": \"^0.7.1\",\n  \"clsx\": \"^2.1.1\",\n  \"tailwind-merge\": \"^3.3.1\",\n  \"tailwindcss-animate\": \"^1.0.7\",\n  \n  // State Management & Forms\n  \"zustand\": \"^4.4.0\",\n  \"@tanstack/react-query\": \"^5.0.0\",\n  \"react-hook-form\": \"^7.48.0\",\n  \"zod\": \"^3.22.0\",\n  \"@hookform/resolvers\": \"^3.3.0\",\n  \n  // AI & External APIs\n  \"openai\": \"^5.8.3\",\n  \"resend\": \"^2.0.0\",\n  \"axios\": \"^1.6.0\",\n  \n  // Animation & Icons\n  \"framer-motion\": \"^12.23.0\",\n  \"lucide-react\": \"^0.525.0\",\n  \n  // SEO & Internationalization\n  \"next-seo\": \"^6.4.0\",\n  \"next-sitemap\": \"^4.2.0\",\n  \"next-intl\": \"^3.0.0\",\n  \n  // Analytics\n  \"@vercel/analytics\": \"^1.1.0\",\n  \n  // Utilities\n  \"date-fns\": \"^3.0.0\",\n  \"es-toolkit\": \"^1.0.0\"\n}\n```\n\n### **Development Dependencies**\n```json\n{\n  \"@types/node\": \"^20.0.0\",\n  \"@types/react\": \"^18.0.0\",\n  \"@types/react-dom\": \"^18.0.0\",\n  \"autoprefixer\": \"^10.0.0\",\n  \"eslint\": \"^8.0.0\",\n  \"eslint-config-next\": \"^14.0.0\",\n  \"postcss\": \"^8.0.0\",\n  \"prettier\": \"^3.0.0\",\n  \"supabase\": \"^1.123.0\"\n}\n```\n\n---\n\n## 🏗️ **Supabase 아키텍처 설계**\n\n### **데이터베이스 스키마**\n```sql\n-- 환자 정보 테이블\nCREATE TABLE patients (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  name VARCHAR(100) NOT NULL,\n  phone VARCHAR(20) UNIQUE NOT NULL,\n  email VARCHAR(255),\n  birth_date DATE,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- 예약 테이블\nCREATE TABLE reservations (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  patient_id UUID REFERENCES patients(id),\n  service_type VARCHAR(50) NOT NULL, -- 라식/라섹/백내장 등\n  appointment_date DATE NOT NULL,\n  appointment_time TIME NOT NULL,\n  status VARCHAR(20) DEFAULT 'pending', -- pending/confirmed/completed/cancelled\n  notes TEXT,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- AI 상담 기록 테이블\nCREATE TABLE consultations (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  patient_id UUID REFERENCES patients(id),\n  conversation JSONB NOT NULL, -- 대화 내용 JSON\n  symptoms TEXT[], -- 증상 배열\n  recommendations TEXT[], -- AI 추천사항\n  urgency_level INTEGER DEFAULT 1, -- 1-5 긴급도\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- 뉴스레터 구독 테이블\nCREATE TABLE newsletter_subscribers (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  name VARCHAR(100),\n  subscribed_at TIMESTAMP DEFAULT NOW(),\n  is_active BOOLEAN DEFAULT true\n);\n\n-- FAQ 테이블\nCREATE TABLE faqs (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  category VARCHAR(50) NOT NULL,\n  question TEXT NOT NULL,\n  answer TEXT NOT NULL,\n  order_index INTEGER DEFAULT 0,\n  is_published BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- 벡터 검색을 위한 확장\nCREATE EXTENSION IF NOT EXISTS vector;\n\n-- AI 지식베이스 테이블 (벡터 검색용)\nCREATE TABLE knowledge_base (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  content TEXT NOT NULL,\n  category VARCHAR(50) NOT NULL,\n  embedding vector(1536), -- OpenAI embedding 차원\n  metadata JSONB,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- 벡터 유사도 검색 인덱스\nCREATE INDEX ON knowledge_base USING ivfflat (embedding vector_cosine_ops);\n```\n\n### **Row Level Security (RLS) 정책**\n```sql\n-- 환자 정보 보안 정책\nALTER TABLE patients ENABLE ROW LEVEL SECURITY;\nCREATE POLICY \"Users can view own data\" ON patients\n  FOR SELECT USING (auth.uid() = id);\n\n-- 예약 정보 보안 정책  \nALTER TABLE reservations ENABLE ROW LEVEL SECURITY;\nCREATE POLICY \"Users can view own reservations\" ON reservations\n  FOR SELECT USING (patient_id = auth.uid());\n\n-- 상담 기록 보안 정책\nALTER TABLE consultations ENABLE ROW LEVEL SECURITY;\nCREATE POLICY \"Users can view own consultations\" ON consultations\n  FOR SELECT USING (patient_id = auth.uid());\n```\n\n---\n\n## ⚡ **Supabase Edge Functions**\n\n### **AI 상담 처리 함수**\n```typescript\n// supabase/functions/ai-consultation/index.ts\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nserve(async (req) => {\n  const { symptoms, patientId } = await req.json()\n  \n  // OpenAI API 호출\n  const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      model: 'gpt-4o',\n      messages: [{\n        role: 'system',\n        content: '당신은 연수김안과의원의 AI 상담 어시스턴트입니다...'\n      }, {\n        role: 'user',\n        content: `증상: ${symptoms.join(', ')}`\n      }]\n    })\n  })\n  \n  const aiResult = await aiResponse.json()\n  \n  // Supabase에 상담 기록 저장\n  const supabase = createClient(\n    Deno.env.get('SUPABASE_URL')!,\n    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\n  )\n  \n  await supabase.from('consultations').insert({\n    patient_id: patientId,\n    conversation: aiResult,\n    symptoms: symptoms,\n    recommendations: extractRecommendations(aiResult)\n  })\n  \n  return new Response(JSON.stringify(aiResult), {\n    headers: { 'Content-Type': 'application/json' }\n  })\n})\n```\n\n### **예약 알림 함수**\n```typescript\n// supabase/functions/send-reservation-notification/index.ts\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\n\nserve(async (req) => {\n  const { reservationId, type } = await req.json()\n  \n  // 예약 정보 조회\n  const supabase = createClient(...)\n  const { data: reservation } = await supabase\n    .from('reservations')\n    .select('*, patients(*)')\n    .eq('id', reservationId)\n    .single()\n  \n  // 카카오톡 알림톡 발송\n  await sendKakaoNotification({\n    phone: reservation.patients.phone,\n    template: 'reservation_confirm',\n    variables: {\n      name: reservation.patients.name,\n      date: reservation.appointment_date,\n      time: reservation.appointment_time\n    }\n  })\n  \n  // Slack 알림 (병원 스태프용)\n  await sendSlackNotification({\n    text: `새 예약: ${reservation.patients.name} - ${reservation.appointment_date}`\n  })\n  \n  return new Response('OK')\n})\n```\n\n---\n\n## 🔧 **환경 설정**\n\n### **환경 변수 (.env.local)**\n```bash\n# Supabase\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\nSUPABASE_SERVICE_ROLE_KEY=your_service_role_key\n\n# OpenAI\nOPENAI_API_KEY=your_openai_api_key\n\n# External APIs\nKAKAO_API_KEY=your_kakao_api_key\nRESEND_API_KEY=your_resend_api_key\nTWILIO_ACCOUNT_SID=your_twilio_sid\nTWILIO_AUTH_TOKEN=your_twilio_token\nSLACK_WEBHOOK_URL=your_slack_webhook\n\n# Analytics\nNEXT_PUBLIC_GA_ID=your_google_analytics_id\n```\n\n### **Supabase 클라이언트 설정**\n```typescript\n// lib/supabase.ts\nimport { createClientComponentClient, createServerComponentClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\n\n// 클라이언트 컴포넌트용\nexport const createClient = () => createClientComponentClient()\n\n// 서버 컴포넌트용\nexport const createServerClient = () => createServerComponentClient({ cookies })\n\n// 타입 정의\nexport type Database = {\n  public: {\n    Tables: {\n      patients: {\n## 📱 **주요 기능별 구현 계획 (PRD 태스크 001~027 반영)**\n\n### **1주차: MVP 핵심 기능**\n```typescript\n// 태스크001~006: 기본 랜딩페이지, 의료 서비스 설명, 예약/상담 UI\n- ✅ Next.js 14 + TypeScript 구조\n- ✅ Tailwind CSS + shadcn/ui 컴포넌트\n- ✅ 서비스 설명, 진료/상담 유형 구분, 예약 폼 설계\n\n// 태스크007~010: AI 챗봇 및 상담 기록\n- 🔄 AI 챗봇 UI/UX, 대화 저장, 상담 추천 알고리즘, 증상 입력\n- 🔄 Supabase 상담 이력 관리 및 AI 추천 로직\n\n// 태스크011~015: 지식베이스, FAQ, 인증, 개인정보\n- 🔄 FAQ/지식베이스 구조화, 벡터 DB 검색, 개인정보 동의\n- 🔄 인증/비회원 처리, 예약 확인/변경/취소 플로우\n\n// 태스크016~019: 관리자, SEO, 모니터링, 백업\n- 🔄 관리자 대시보드, SEO/AEO/모바일 최적화, 성능/이상 모니터링, 자동 백업\n\n// 태스크020~022: 규정 준수, 외부 API, 장애 대응\n- 🔄 HIPAA/의료 규정 준수, 카카오/이메일/슬랙 연동, 장애 자동화 및 복구\n\n// 태스크023: 실명 인증 및 본인 확인 로직\n- 🔄 간편 본인 인증(휴대폰 인증만 적용, I-PIN 생략)\n- 🔄 실명 확인: 예약·상담 시 이름/생년월일/휴대폰 3자 정보 간단 일치 검증\n\n// 태스크024: 모바일 최적화(안드로이드, 아이폰)\n- 🔄 주요 UI/UX 모바일 반응형 구조 적용\n- 🔄 iOS/Android 크로스브라우징 및 터치 인터페이스 최적화\n\n// 태스크025: 예약 리마인더(알림) 자동화\n- 🔄 예약 전/후 자동 알림톡 및 이메일 발송\n- 🔄 예약 일정 기반 스케줄러 연동\n\n// 태스크026: 상담 이력 데이터 시각화 및 통계 대시보드\n- 🔄 관리자용 상담/예약 통계 그래프, 월별 리포트\n\n// 태스크027: 관리자/의료진용 알림 및 승인 플로우\n- 🔄 신규 예약/상담 발생 시 의료진 알림 및 승인 트리거\n```\n\n### **2주차: 고도화 및 자동화 기능**\n```typescript\n// AI 및 실시간 기능\n- 고급 벡터 검색, 실시간 상담/알림, 예약/상담 자동화\n// 마케팅/운영 자동화\n- 이메일 뉴스레터, 재방문 리마인더, 고객 여정 추적, 장애 대응 자동화\n// 분석/최적화\n- 사용자 행동 분석, A/B 테스트, 성능 모니터링, 데이터 복구\n```\n- 🔄 관리자 대시보드, SEO/AEO/모바일 최적화, 성능/이상 모니터링, 자동 백업\n\n// 태스크020~022: 규정 준수, 외부 API, 장애 대응\n- 🔄 HIPAA/의료 규정 준수, 카카오/이메일/슬랙 연동, 장애 자동화 및 복구\n```\n\n### **2주차: 고도화 및 자동화 기능**\n```typescript\n// AI 및 실시간 기능\n- 고급 벡터 검색, 실시간 상담/알림, 예약/상담 자동화\n// 마케팅/운영 자동화\n- 이메일 뉴스레터, 재방문 리마인더, 고객 여정 추적, 장애 대응 자동화\n// 분석/최적화\n- 사용자 행동 분석, A/B 테스트, 성능 모니터링, 데이터 복구\n```\n\n## 📱 **주요 기능별 구현 계획**\n\n### **1주차: MVP 핵심 기능**\n```typescript\n// 우선순위 1: 기본 랜딩페이지\n- ✅ Next.js 14 + TypeScript 기반 구조\n- ✅ Tailwind CSS + shadcn/ui 컴포넌트\n- ✅ Supabase 초기 설정\n\n// 우선순위 2: AI 챗봇 연동\n- 🔄 기존 GPTs 링크 연결\n- 🔄 Typebot 임베딩\n- 🔄 상담 내용 Supabase 저장\n\n// 우선순위 3: 예약 시스템\n- 🔄 예약 폼 (React Hook Form + Zod)\n- 🔄 Supabase 데이터 저장\n- 🔄 카카오톡 알림톡 발송\n- 🔄 Slack 내부 알림\n\n// 우선순위 4: 기본 SEO\n- 🔄 메타 태그 최적화\n- 🔄 구조화 데이터\n- 🔄 사이트맵 생성\n```\n\n### **2주차: 고도화 기능**\n```typescript\n// 고급 AI 기능\n- 벡터 검색 (pgvector)\n- 실시간 상담 (Supabase Realtime)\n- AI 추천 시스템\n\n// 마케팅 자동화\n- 이메일 뉴스레터 (Resend)\n- 재방문 리마인더\n- 고객 여정 추적\n\n// 분석 & 최적화\n- 사용자 행동 분석\n- A/B 테스트\n- 성능 모니터링\n```\n\n---\n\n## 🚀 **배포 아키텍처**\n\n### **Production Stack**\n```typescript\n{\n  \"frontend\": \"Vercel (Next.js)\",\n  \"backend\": \"Supabase (Edge Functions)\",\n  \"database\": \"Supabase PostgreSQL\",\n  \"cdn\": \"Vercel Edge Network\",\n  \"monitoring\": \"Vercel Analytics + Supabase Monitoring\",\n  \"domain\": \"연수김안과 도메인\"\n}\n```\n\n### **개발 워크플로우**\n```bash\n# 1. 로컬 개발 환경 설정\nnpm install\nnpx supabase start\nnpm run dev\n\n# 2. Supabase 마이그레이션\nnpx supabase db reset\nnpx supabase db push\n\n# 3. Edge Functions 배포\nnpx supabase functions deploy ai-consultation\nnpx supabase functions deploy send-reservation-notification\n\n# 4. 프로덕션 배포\nnpm run build\nvercel --prod\n```\n\n---\n\n## 💡 **Supabase 활용의 핵심 장점**\n\n### **🎯 1주일 출시를 위한 최적 선택**\n1. **즉시 사용 가능한 PostgreSQL**: 복잡한 DB 설정 불필요\n2. **실시간 기능**: 예약 현황 실시간 업데이트\n3. **인증 시스템**: 환자 로그인/가입 자동 처리\n4. **Edge Functions**: 서버리스 백엔드 로직\n5. **파일 스토리지**: 의료 이미지/문서 저장\n6. **벡터 검색**: AI 지식베이스 구축\n\n### **의료 서비스 특화 기능**\n1. **Row Level Security**: 환자 개인정보 보호\n2. **실시간 알림**: 응급 상황 즉시 대응\n3. **데이터 백업**: 자동 백업 및 복구\n4. **규정 준수**: HIPAA 준수 인프라\n\n---\n\n## 📊 **예상 성능 지표**\n\n### **기술적 성능**\n- **Lighthouse Score**: 95+ (Vercel + Supabase 최적화)\n- **Core Web Vitals**: 모든 지표 Green\n- **API Response Time**: < 200ms (Edge Functions)\n- **Database Query Time**: < 50ms (최적화된 인덱스)\n\n### **비즈니스 성능**\n- **예약 전환율**: 35% 목표\n- **챗봇 상담 만족도**: 4.8/5.0 목표\n- **페이지 로딩 시간**: < 2초\n- **모바일 사용성**: 90% 이상\n\n---\n",
      "writedAt": "2025-08-13T03:44:00.090Z"
    },
    {
      "type": "guideline",
      "content": "# Code Guidelines for YSK AI Landing Page\n\n## 1. Project Overview\n\n이 프로젝트는 TRD(Technical Requirements Document)에서 정의한 아키텍처, 기술 스택, 기능 요구사항을 기반으로 개발합니다. 주요 변경 사항 및 스펙은 다음과 같습니다:\n\n## 2. Core Principles (TRD 반영)\n\n1.  **TRD 최신 명세 반영 필수**: 모든 기술적, 기능적 의사결정은 항상 최신의 TRD(Technical Requirements Document) 내용을 기준으로 합니다. TRD 변경 내역은 코드 가이드라인에 즉시 반영하고, 변경 이력은 별도 문서로 관리합니다.\n2.  **성능 지표 충족**: 최신 TRD에 명시된 성능 목표(FCP, TTFB 등 수치 포함)를 반드시 충족해야 하며, 변경 시 코드에 주석 및 문서에 근거를 남깁니다.\n3.  **보안 요건 준수**: RLS, 개인정보 암호화, 인증·인가 등 TRD의 보안 요구사항을 코드 레벨에서 구현하고, 변경된 보안 정책이 있을 경우 코드 내 주석 및 가이드라인에 즉시 반영합니다.\n4.  **확장성 및 모듈화**: EMR 연동, 음성 AI 등 TRD의 최신 확장 요구를 염두에 두고 컴포넌트/서비스를 설계 및 분리합니다.\n5.  **테스트/검증 자동화**: TRD에서 요구하는 테스트 커버리지, 자동화(예: CI/CD, e2e 테스트 등) 수준을 준수하며, 변경 시 근거를 코드와 문서에 명확히 남깁니다.\n6.  **코드 표준화/일관성**: 네이밍, 파일구조, 스타일 가이드 등 TRD 명시 기준을 항상 최신 기준으로 맞추고, 예외 발생 시 TRD 내 근거를 명확히 남깁니다.\n\n## 3. Language-Specific Guidelines (TRD 기준)\n\n## 2. Core Principles\n\n1.  **Performance First**: Prioritize fast loading times and efficient resource utilization to meet FCP <1.5s and TTFB <200ms.\n2.  **Security by Design**: Implement robust security measures, especially RLS, to protect sensitive patient data.\n3.  **Maintainability & Readability**: Write clean, well-structured, and easily understandable code with clear naming conventions.\n4.  **Scalability & Extensibility**: Design components and services to be easily scalable and adaptable for future features like voice AI and EMR integration.\n5.  **Testability**: Write code that is inherently testable to ensure reliability and reduce bugs.\n\n## 3. Language-Specific Guidelines\n\n### 3.1. File Organization and Directory Structure (Next.js App Router)\n\n**MUST:**\n*   Organize code by feature or domain within the `app/` directory.\n*   Use `(group)` conventions for logical grouping without affecting routing.\n*   Place shared components in `components/ui` (for shadcn/ui extensions) or `components/shared`.\n*   Store Supabase client logic in `lib/supabase.ts`.\n*   Keep utility functions in `lib/utils.ts` or `lib/helpers/`.\n*   Define API routes in `app/api/`.\n*   Place Supabase Edge Functions in `supabase/functions/`.\n\n```\n// MUST: Recommended project structure\n.\n├── app/\n│   ├── (auth)/\n│   │   ├── login/\n│   │   │   └── page.tsx\n│   │   └── signup/\n│   │       └── page.tsx\n│   ├── (main)/\n│   │   ├── page.tsx          // Homepage\n│   │   ├── about/\n│   │   │   └── page.tsx\n│   │   ├── booking/\n│   │   │   ├── page.tsx\n│   │   │   └── components/\n│   │   │       ├── BookingForm.tsx\n│   │   │       └── CalendarPicker.tsx\n│   │   ├── chatbot/\n│   │   │   ├── page.tsx\n│   │   │   └── components/\n│   │   │       └── AIChatbot.tsx\n│   │   └── faq/\n│   │       └── page.tsx\n│   ├── api/\n│   │   ├── chat/\n│   │   │   └── route.ts      // API route for chat\n│   │   └── booking/\n│   │       └── route.ts      // API route for booking\n│   └── layout.tsx            // Root layout\n├── components/\n│   ├── ui/                   // shadcn/ui components\n│   │   ├── button.tsx\n│   │   └── dialog.tsx\n│   └── shared/               // Reusable cross-feature components\n│       ├── Header.tsx\n│       └── Footer.tsx\n├── lib/\n│   ├── supabase.ts           // Supabase client setup\n│   ├── utils.ts              // General utilities (cn, etc.)\n│   └── helpers/              // Specific helper functions\n│       └── date-helpers.ts\n├── public/                   // Static assets\n├── supabase/\n│   ├── functions/            // Supabase Edge Functions\n│   │   ├── ai-consultation/\n│   │   │   └── index.ts\n│   │   └── send-notification/\n│   │       └── index.ts\n│   └── migrations/           // Supabase DB migrations\n├── types/                    // Global TypeScript types\n│   └── index.d.ts\n├── .env.local\n├── next.config.js\n├── tailwind.config.ts\n└── tsconfig.json\n```\n\n**MUST NOT:**\n*   Create deeply nested directories without clear logical separation.\n*   Mix component definitions directly within `app/` route files unless they are highly specific and small.\n\n### 3.2. Import/Dependency Management\n\n**MUST:**\n*   Use absolute imports for components and modules defined within the project (configured via `tsconfig.json` `paths`).\n*   Group imports: React/Next.js, external libraries, internal components, internal utilities, CSS.\n*   Maintain alphabetical order within each import group.\n\n```typescript\n// MUST: Correct import ordering and absolute paths\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport styles from './page.module.css';\n```\n\n**MUST NOT:**\n*   Use relative imports like `../../../components/Button`.\n*   Have unorganized or randomly ordered imports.\n\n### 3.3. Error Handling Patterns\n\n**MUST:**\n*   Implement centralized error logging (e.g., to Slack for critical errors).\n*   Use `try-catch` blocks for asynchronous operations, especially API calls and database interactions.\n*   Provide user-friendly error messages on the frontend.\n*   Utilize Next.js `error.tsx` for boundary errors in UI.\n*   Handle Supabase client errors gracefully.\n\n```typescript\n// MUST: Robust error handling for API calls\n// app/api/booking/route.ts\nimport { NextResponse } from 'next/server';\nimport { createServerClient } from '@/lib/supabase';\n\nexport async function POST(request: Request) {\n  try {\n    const supabase = createServerClient();\n    const { data, error } = await supabase.from('reservations').insert(/* ... */);\n\n    if (error) {\n      console.error('Supabase insert error:', error);\n      return NextResponse.json({ message: 'Failed to create reservation', error: error.message }, { status: 500 });\n    }\n\n    // Send notification via Edge Function\n    await fetch(`${process.env.SUPABASE_URL}/functions/v1/send-reservation-notification`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ reservationId: data[0].id, type: 'new' })\n    });\n\n    return NextResponse.json({ message: 'Reservation created successfully', data }, { status: 201 });\n  } catch (err) {\n    console.error('Unhandled error in booking API:', err);\n    // Log to Slack or other monitoring service\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\n  }\n}\n*   **TypeScript Strictness**: TRD에서 지정한 `strict` 모드 옵션(예: strictNullChecks, noImplicitAny, strictBindCallApply 등)을 `tsconfig.json`에 반드시 명시합니다. TRD가 변경될 경우 해당 옵션도 즉시 반영합니다. 모든 함수/객체/props에 명확한 타입을 부여해야 하며, TRD에서 추가된 타입 정책(예: 유니언 타입 사용 제한 등)이 있을 경우 이를 준수합니다.\n    *   **Rationale**: 최신 TRD의 안전성 및 사전 검증 기준에 부합\n*   **Naming Conventions**:\n    *   변수/함수: `camelCase` (예: `userName`, `getUserProfile`)\n    *   컴포넌트/타입/인터페이스: `PascalCase` (예: `BookingForm`, `Patient`)\n    *   상수: `SCREAMING_SNAKE_CASE` (예: `MAX_RETRIES`, `API_BASE_URL`)\n    *   파일명/디렉토리명: 최신 TRD에 명시된 규칙(kebab-case, snake_case 등) 우선 적용. 예외가 있으면 TRD 명세에 따라 예외를 명확히 남김.\n    *   TRD에 네이밍 예시, 예외, 추가 규칙(예: prefix, suffix, reserved word 사용 금지 등)이 명시된 경우, 반드시 TRD 최신 명세 우선 적용\n    *   **Rationale**: 최신 TRD 기준의 코드 표준화 및 자동화 검증에 부합\n### 4.1. MUST Follow\n\n*   **TypeScript Strictness**: Enable `strict` mode in `tsconfig.json`. Use explicit types for function arguments, return values, and complex objects.\n    *   **Rationale**: Enhances code quality, catches errors early, and improves maintainability.\n*   **Naming Conventions**:\n    *   Variables: `camelCase` (e.g., `userName`, `appointmentDate`).\n    *   Functions: `camelCase` (e.g., `getUserProfile`, `formatDate`).\n    *   Components: `PascalCase` (e.g., `BookingForm`, `AIChatbot`).\n    *   Constants: `SCREAMING_SNAKE_CASE` (e.g., `MAX_RETRIES`, `API_BASE_URL`).\n    *   Types/Interfaces: `PascalCase` (e.g., `Patient`, `ReservationData`).\n    *   **Rationale**: Consistency improves readability and reduces cognitive load.\n*   **Component Structure**:\n    *   Functional components using arrow functions.\n    *   Props destructuring at the top of the component.\n    *   Use `use client` directive at the top of client components.\n// TRD 네이밍/타입/strict 예시\n```typescript\n*   **Tailwind CSS Best Practices**:\n    *   Use utility classes directly in JSX.\n    *   Utilize `clsx` and `tailwind-merge` for conditional and combined classes.\n    *   **Rationale**: Leverages Tailwind's power for efficient styling.\n*   **Supabase Interactions**:\n    *   Always use the `createServerClient` in Server Components/Actions and API Routes.\n    *   Use `createClientComponentClient` in Client Components.\n    *   Handle `error` objects returned by Supabase methods explicitly.\n    *   **Rationale**: Ensures proper authentication and data access patterns across server and client.\n\n```typescript\n// MUST: Component structure, typing, and Supabase interaction\n// app/booking/components/BookingForm.tsx (client component)\n'use client';\n\nimport { useState } from 'react';\nimport { createClient } from '@/lib/supabase';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport type { Database } from '@/lib/supabase'; // Import Supabase types\n\ntype PatientInsert = Database['public']['Tables']['patients']['Insert'];\n\ninterface BookingFormProps {\n  initialPatientData?: PatientInsert;\n  onBookingSuccess: () => void;\n}\n\nexport function BookingForm({ initialPatientData, onBookingSuccess }: BookingFormProps) {\n  const supabase = createClient();\n  const [name, setName] = useState(initialPatientData?.name || '');\n  const [phone, setPhone] = useState(initialPatientData?.phone || '');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    try {\n      const { data: patient, error: patientError } = await supabase\n        .from('patients')\n        .upsert({ name, phone }, { onConflict: 'phone' })\n        .select()\n        .single();\n\n      if (patientError) throw patientError;\n\n      const { error: reservationError } = await supabase.from('reservations').insert({\n        patient_id: patient.id,\n        service_type: 'General Consultation', // Example\n        appointment_date: new Date().toISOString().split('T')[0], // Example\n        appointment_time: '10:00:00' // Example\n      });\n\n      if (reservationError) throw reservationError;\n\n      onBookingSuccess();\n    } catch (err: any) {\n      console.error('Booking error:', err);\n      setError(err.message || 'An unexpected error occurred.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {/* ... form fields ... */}\n      {error && <p className=\"text-red-500\">{error}</p>}\n      <Button type=\"submit\" disabled={loading}>\n        {loading ? 'Booking...' : 'Confirm Booking'}\n      </Button>\n    </form>\n  );\n}\n```\n\n### 4.2. MUST NOT Do\n\n*   **Avoid Any/Implicit Any**: Do not use `any` type unless absolutely necessary for external libraries without type definitions. Avoid situations where TypeScript infers `any`.\n    *   **Rationale**: Defeats the purpose of TypeScript and introduces potential runtime errors.\n*   **Global State Pollution**: Avoid creating global variables or functions that are not explicitly part of a state management solution (e.g., Zustand).\n    *   **Rationale**: Leads to unpredictable side effects and difficult debugging.\n*   **Direct DOM Manipulation**: Avoid using `document.querySelector` or direct DOM manipulation in React components. Use React's state and refs instead.\n    *   **Rationale**: Breaks React's declarative paradigm and can lead to performance issues.\n*   **Over-optimization**: Do not prematurely optimize code that is not a proven performance bottleneck. Focus on readability and maintainability first.\n    *   **Rationale**: Often introduces complexity without significant benefits.\n*   **Large, Multi-Responsibility Files**: Avoid creating single files that handle multiple unrelated concerns (e.g., a component file that also defines API logic and database schema).\n    *   **Rationale**: Reduces modularity, makes files hard to read, and hinders maintainability.\n\n```typescript\n// MUST NOT: Anti-pattern - mixing concerns and direct DOM manipulation\n// app/booking/page.tsx (wrong example)\n'use client';\n\nimport { useEffect } from 'react';\n// ... other imports\n\nexport default function BookingPage() {\n  useEffect(() => {\n    // BAD: Direct DOM manipulation\n    const button = document.getElementById('submit-button');\n    if (button) {\n      button.addEventListener('click', () => {\n        alert('Booking submitted!');\n      });\n    }\n  }, []);\n\n  // BAD: All logic for booking form, calendar, and confirmation in one file\n  const handleBooking = () => {\n    // ... complex booking logic here\n    // ... API call\n    // ... Supabase interaction\n    // ... notification logic\n  };\n\n  return (\n    <div>\n      <h1>Book Your Appointment</h1>\n      {/* ... huge form and calendar components defined inline */}\n      <button id=\"submit-button\" onClick={handleBooking}>Submit</button>\n    </div>\n  );\n}\n```\n\n## 5. Architecture Patterns\n\n### 5.1. Component/Module Structure Guidelines\n\n**MUST:**\n*   **Server Components First**: Default to Server Components for data fetching and rendering static/server-side content.\n*   **Client Components for Interactivity**: Use `use client` only when interactivity (hooks, event listeners) is required.\n*   **Co-location**: Place components, types, and styles related to a specific feature within its dedicated directory.\n*   **Atomic Design Principles**: Consider breaking down UI into smaller, reusable atoms, molecules, and organisms (e.g., `Button`, `Input` are atoms; `BookingForm` is an organism).\n\n### 5.2. Data Flow Patterns\n\n**MUST:**\n*   **Server Component Data Fetching**: Fetch data directly in Server Components using `await` for Supabase queries.\n*   **Server Actions for Mutations**: Use Server Actions for data mutations (e.g., form submissions, updates).\n*   **Props for Data Down**: Pass data from parent (Server) components to child (Client) components via props.\n*   **State Management (Client-side)**: Use Zustand for global client-side state that needs to be shared across multiple, unrelated client components. Use `useState`/`useReducer` for local component state.\n*   **React Query for Client-side Data Fetching**: For client-side data fetching that requires caching, revalidation, and loading states, use `@tanstack/react-query`.\n\n```typescript\n// MUST: Server Component data fetching and passing to Client Component\n// app/booking/page.tsx (Server Component)\nimport { createServerClient } from '@/lib/supabase';\nimport { BookingForm } from './components/BookingForm'; // Client Component\n\nexport default async function BookingPage() {\n  const supabase = createServerClient();\n  const { data: patientData } = await supabase\n    .from('patients')\n    .select('*')\n    .limit(1) // Example: fetch current user's data\n    .single();\n\n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Book Your Appointment</h1>\n      <BookingForm initialPatientData={patientData || undefined} onBookingSuccess={() => console.log('Booking successful!')} />\n    </div>\n  );\n}\n```\n\n### 5.3. State Management Conventions\n\n**MUST:**\n*   **Local State**: Prefer `useState` and `useReducer` for state confined to a single component or a small component tree.\n*   **Global Client State**: Use Zustand for application-wide client-side state (e.g., user session details, theme settings, notifications).\n*   **Server State (Caching/Syncing)**: Use `@tanstack/react-query` for managing server-fetched data on the client, providing caching, background re-fetching, and automatic re-tries.\n\n```typescript\n// MUST: Zustand store example\n// stores/userStore.ts\nimport { create } from 'zustand';\n\ninterface UserState {\n  userId: string | null;\n  email: string | null;\n  setUserId: (id: string | null) => void;\n  setEmail: (email: string | null) => void;\n}\n\nexport const useUserStore = create<UserState>((set) => ({\n  userId: null,\n  email: null,\n  setUserId: (id) => set({ userId: id }),\n  setEmail: (email) => set({ email }),\n}));\n```\n\n### 5.4. API Design Standards\n\n**MUST:**\n*   **RESTful Principles**: Design API routes following RESTful conventions (e.g., `/api/reservations` for collections, `/api/reservations/[id]` for specific resources).\n*   **Clear Endpoints**: Use descriptive and plural nouns for resource names.\n*   **HTTP Methods**: Use appropriate HTTP methods (GET for retrieval, POST for creation, PUT/PATCH for updates, DELETE for removal).\n*   **JSON Payloads**: All request and response bodies MUST be in JSON format.\n*   **Error Responses**: Return meaningful HTTP status codes (2xx for success, 4xx for client errors, 5xx for server errors) and include a JSON body with an `error` message.\n*   **Supabase Edge Functions for Business Logic**: Encapsulate complex business logic, external API calls (OpenAI, KakaoTalk), and sensitive operations within Supabase Edge Functions.\n    *   **Rationale**: Enhances security by keeping API keys server-side and improves performance by running logic closer to the database.\n\n```typescript\n// MUST: Edge Function for AI consultation\n// supabase/functions/ai-consultation/index.ts\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts';\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\nserve(async (req) => {\n  if (req.method !== 'POST') {\n    return new Response(JSON.stringify({ error: 'Method Not Allowed' }), { status: 405 });\n  }\n\n  try {\n    const { symptoms, patientId } = await req.json();\n\n    if (!symptoms || !patientId) {\n      return new Response(JSON.stringify({ error: 'Missing symptoms or patientId' }), { status: 400 });\n    }\n\n    // Call OpenAI API\n    const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o',\n        messages: [{ role: 'system', content: 'You are an AI assistant for eye care...' }, { role: 'user', content: `Symptoms: ${symptoms.join(', ')}` }]\n      })\n    });\n\n    if (!aiResponse.ok) {\n      const errorData = await aiResponse.json();\n      console.error('OpenAI API error:', errorData);\n      return new Response(JSON.stringify({ error: 'Failed to get AI response', details: errorData }), { status: aiResponse.status });\n    }\n\n    const aiResult = await aiResponse.json();\n\n    // Store consultation record in Supabase\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL')!,\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')! // Use service role key for server-side operations\n    );\n\n    const { error: dbError } = await supabase.from('consultations').insert({\n      patient_id: patientId,\n      conversation: aiResult,\n      symptoms: symptoms,\n      recommendations: aiResult.choices[0]?.message?.content ? [aiResult.choices[0].message.content] : []\n    });\n\n    if (dbError) {\n      console.error('Supabase DB error:', dbError);\n      return new Response(JSON.stringify({ error: 'Failed to save consultation', details: dbError.message }), { status: 500 });\n    }\n\n    return new Response(JSON.stringify(aiResult), {\n      headers: { 'Content-Type': 'application/json' },\n      status: 200\n    });\n  } catch (error: any) {\n    console.error('Edge Function unhandled error:', error);\n    return new Response(JSON.stringify({ error: 'Internal Server Error', details: error.message }), { status: 500 });\n  }\n});\n```",
      "writedAt": "2025-08-13T03:44:00.090Z"
    },
    {
      "type": "design-guide",
      "content": "# 연수김안과 AI 랜딩페이지 Design Guide\n\n## 1. Overall Mood (전체적인 무드)\n**\"Progressive Medical Trust\"** - 30년 전통의 신뢰성과 AI 혁신 기술이 조화를 이루는 미래지향적 의료 서비스 브랜드. 테크니컬하면서도 신뢰할 수 있는 무드로, \"30년의 신뢰, AI로 미래를 열다\"라는 브랜드 메시지를 시각적으로 구현합니다.\n\n## 2. Reference Service (참조 서비스)\n**Vercel**을 주요 레퍼런스로 선정하여 테크니컬한 전문성과 신뢰성을 동시에 표현합니다.\n- **Name**: Vercel\n- **Description**: 프론트엔드 클라우드 플랫폼\n- **Design Mood**: 테크니컬하면서도 신뢰할 수 있는, 깔끔하고 모던한 프로페셔널\n- **Primary Color**: #000000 (블랙)\n- **Secondary Color**: #0070F3 (브라이트 블루)\n\n## 3. Color & Gradient (색상 & 그라데이션)\n쿨톤 베이스에 중간 채도로 신뢰감과 미래적 느낌을 조화롭게 표현합니다.\n\n### 메인 컬러\n- **Primary Color**: #000000 (Deep Black) - 전문성과 신뢰성\n- **Secondary Color**: #0070F3 (Bright Blue) - AI 혁신과 미래 기술\n- **Accent Color**: #00D2FF (Cyan Blue) - 그라데이션 및 강조 요소\n- **Success Color**: #00D924 (Medical Green) - 예약 완료, 성공 상태\n\n### 그레이스케일\n- **Gray 900**: #1A1A1A (헤더, 중요 텍스트)\n- **Gray 700**: #4A4A4A (본문 텍스트)\n- **Gray 500**: #9CA3AF (보조 텍스트)\n- **Gray 300**: #D1D5DB (구분선, 테두리)\n- **Gray 100**: #F3F4F6 (배경, 카드)\n- **White**: #FFFFFF (메인 배경)\n\n### **Mood**: Cool tone, Medium saturation\n### **Color Usage**: \n- Primary (Black): 로고, 헤딩, 네비게이션, CTA 버튼\n- Secondary (Blue): 링크, AI 챗봇 UI, 액션 버튼, 그라데이션\n- Accent (Cyan): 호버 효과, 그라데이션, 강조 포인트\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n깔끔하고 가독성 높은 시스템 폰트 기반으로 전문성을 표현합니다.\n\n- **Font Family**: \"Pretendard\", \"Apple SD Gothic Neo\", \"Noto Sans KR\", sans-serif\n- **Heading 1**: 48px, Font-weight: 700, Letter-spacing: -0.025em\n- **Heading 2**: 36px, Font-weight: 600, Letter-spacing: -0.02em\n- **Heading 3**: 24px, Font-weight: 600, Letter-spacing: -0.01em\n- **Body Large**: 18px, Font-weight: 400, Line-height: 1.6\n- **Body**: 16px, Font-weight: 400, Line-height: 1.5\n- **Caption**: 14px, Font-weight: 400, Line-height: 1.4\n\n## 5. Layout & Structure (레이아웃 & 구조)\n### 그리드 시스템\n- **Desktop**: 12-column grid, Max-width: 1200px\n- **Tablet**: 8-column grid, Max-width: 768px  \n- **Mobile**: 4-column grid, Max-width: 375px\n- **Spacing Unit**: 8px 기반 (8, 16, 24, 32, 48, 64px)\n\n### 섹션 구조\n1. **Hero Section**: \"30년의 신뢰, AI로 미래를 열다\" 메인 메시지\n2. **AI 상담 CTA**: 즉시 접근 가능한 챗봇 인터페이스\n3. **Services**: 주요 진료 분야 (시력교정, 백내장, 노안 등)\n4. **Trust Indicators**: 30년 전통, 의료진 소개\n5. **Quick Booking**: 간편 예약 시스템\n\n## 6. Visual Style (비주얼 스타일)\n### 아이콘\n- **Style**: Outline 스타일, 2px stroke\n- **Size**: 24px, 32px, 48px\n- **Color**: Primary Black 또는 Secondary Blue\n\n### 이미지\n- **Photography**: 자연스럽고 전문적인 의료진/병원 이미지\n- **Illustration**: 미니멀하고 모던한 라인 아트\n- **Border Radius**: 8px (카드), 16px (이미지), 24px (버튼)\n\n### 그라데이션\n- **Primary Gradient**: linear-gradient(135deg, #0070F3 0%, #00D2FF 100%)\n- **Subtle Gradient**: linear-gradient(135deg, #F8FAFC 0%, #E2E8F0 100%)\n\n## 7. UX Guide (UX 가이드)\n### **듀얼 트랙 UX 전략**\n\n#### **전문가를 위한 핵심 기능 집약**\n- 메인 화면 상단에 핵심 정보 한눈에 배치\n- AI 챗봇에서 전문 의료 용어로 즉시 질문 가능\n- \"빠른 예약\" 버튼으로 최소 클릭 완료\n- \"전문의 직접 상담\" 즉시 연결 옵션\n\n#### **초보자를 위한 친근한 온보딩**\n- \"처음 방문하시나요?\" 가이드 팝업 제공\n- AI 챗봇이 \"어떤 증상이 있으신가요?\"부터 친절하게 시작\n- 의료 용어 설명 툴팁 제공\n- **자주 묻는 질문(FAQ)** 섹션을 메인에 배치\n- 단계별 튜토리얼 가이드 페이지 준비\n- AI 자동 생성 FAQ로 지속적 콘텐츠 업데이트\n\n### 사용성 원칙\n- **명확성**: 모든 액션의 결과가 명확히 예측 가능\n- **접근성**: WCAG 2.1 AA 레벨 준수\n- **반응성**: 모든 인터랙션에 즉각적 피드백 제공\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n\n### 버튼\n- **Primary Button**: Black background, White text, 48px height, 16px border-radius\n- **Secondary Button**: Blue outline, Blue text, 48px height\n- **CTA Button**: Blue gradient background, White text, 56px height\n\n### 입력 필드\n- **Input Field**: Gray border, 48px height, 8px border-radius\n- **Focus State**: Blue border, Blue shadow\n- **Error State**: Red border, Red helper text\n\n### 카드\n- **Card**: White background, 1px Gray border, 16px border-radius\n- **Shadow**: 0 4px 6px rgba(0, 0, 0, 0.05)\n- **Hover**: 0 8px 25px rgba(0, 0, 0, 0.1)\n\n### 네비게이션\n- **Header**: White background, 80px height, subtle shadow\n- **Logo**: 연수김안과 + AI 아이콘 조합\n- **Menu Items**: 16px font, Medium weight, Black color\n\n### AI 챗봇 UI\n- **Chat Bubble**: Blue gradient for AI, Gray for user\n- **Input Box**: White background, Blue accent border\n- **Quick Actions**: Blue outline buttons for common questions\n\n이 디자인 가이드로 연수김안과의 30년 전통과 AI 혁신이 완벽하게 조화된 랜딩페이지를 만들어보세요! 🚀",
      "writedAt": "2025-08-13T03:44:00.090Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-08-13T03:44:00.090Z"
    },
    {
      "type": "tdd",
      "content": "\n# TDD Process Guidelines - Cursor Rules\n\n## ⚠️ MANDATORY: Follow these rules for EVERY implementation and modification\n\n**This document defines the REQUIRED process for all code changes. No exceptions without explicit team approval.**\n\n## Core Cycle: Red → Green → Refactor\n\n### 1. RED Phase\n- Write a failing test FIRST\n- Test the simplest scenario\n- Verify test fails for the right reason\n- One test at a time\n\n### 2. GREEN Phase  \n- Write MINIMAL code to pass\n- \"Fake it till you make it\" is OK\n\n- YAGNI principle\n\n### 3. REFACTOR Phase\n- Remove duplication\n- Improve naming\n- Simplify structure\n- Keep tests passing\n\n## Test Quality: FIRST Principles\n- **Fast**: Milliseconds, not seconds\n- **Independent**: No shared state\n- **Repeatable**: Same result every time\n- **Self-validating**: Pass/fail, no manual checks\n- **Timely**: Written just before code\n\n## Test Structure: AAA Pattern\n```\n// Arrange\nSet up test data and dependencies\n\n// Act\nExecute the function/method\n\n// Assert\nVerify expected outcome\n```\n\n## Implementation Flow\n1. **List scenarios** before coding\n2. **Pick one scenario** → Write test\n3. **Run test** → See it fail (Red)\n4. **Implement** → Make it pass (Green)\n5. **Refactor** → Clean up (Still Green)\n6. **Commit** → Small, frequent commits\n7. **Repeat** → Next scenario\n\n## Test Pyramid Strategy\n- **Unit Tests** (70%): Fast, isolated, numerous\n- **Integration Tests** (20%): Module boundaries\n- **Acceptance Tests** (10%): User scenarios\n\n## Outside-In vs Inside-Out\n- **Outside-In**: Start with user-facing test → Mock internals → Implement details\n- **Inside-Out**: Start with core logic → Build outward → Integrate components\n\n## Common Anti-patterns to Avoid\n- Testing implementation details\n- Fragile tests tied to internals  \n- Missing assertions\n- Slow, environment-dependent tests\n- Ignored failing tests\n\n## When Tests Fail\n1. **Identify**: Regression, flaky test, or spec change?\n2. **Isolate**: Narrow down the cause\n3. **Fix**: Code bug or test bug\n4. **Learn**: Add missing test cases\n\n## Team Practices\n- CI/CD integration mandatory\n- No merge without tests\n- Test code = Production code quality\n- Pair programming for complex tests\n- Regular test refactoring\n\n## Pragmatic Exceptions\n- UI/Graphics: Manual + snapshot tests\n- Performance: Benchmark suites\n- Exploratory: Spike then test\n- Legacy: Test on change\n\n## Remember\n- Tests are living documentation\n- Test behavior, not implementation\n- Small steps, fast feedback\n- When in doubt, write a test\n",
      "writedAt": "2025-08-13T03:44:00.090Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-08-13T03:44:00.090Z"
    },
    {
      "type": "git-commit-message",
      "content": "\n# Git Commit Message Rules\n\n## Format Structure\n```\n<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer]\n```\n\n## Types (Required)\n- `feat`\n- `fix`\n- `docs`\n- `style`\n- `refactor`\n- `perf`\n- `test`\n- `chore`\n- `ci`\n- `build`\n- `revert`\n\n## Scope (Optional)\n- Component, file, or feature area affected\n- Use kebab-case: `user-auth`, `payment-api`\n- Omit if change affects multiple areas\n\n## Description Rules\n- Use imperative mood\n- No capitalization of first letter\n- No period at end\n- Max 50 characters\n- Be specific and actionable\n\n## Body Guidelines\n- Wrap at 72 characters\n- Explain what and why, not how\n- Separate from description with blank line\n- Use bullet points for multiple changes\n\n## Footer Format\n- `BREAKING CHANGE:` for breaking changes\n- `Closes #123` for issue references\n- `Co-authored-by: Vooster AI (@vooster-ai)`\n\n## Examples\n```\nfeat(auth): add OAuth2 Google login\n\nfix: resolve memory leak in user session cleanup\n\ndocs(api): update authentication endpoints\n\nrefactor(utils): extract validation helpers to separate module\n\nBREAKING CHANGE: remove deprecated getUserData() method\n```\n\n## Workflow Integration\n**ALWAYS write a commit message after completing any development task, feature, or bug fix.**\n\n## Validation Checklist\n- [ ] Type is from approved list\n- [ ] Description under 50 chars\n- [ ] Imperative mood used\n- [ ] No trailing period\n- [ ] Meaningful and clear context\n    ",
      "writedAt": "2025-08-13T03:44:00.090Z"
    }
  ]
}